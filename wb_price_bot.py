
import requests
import time
import json
import os
from urllib.parse import quote_plus
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN', 'PUT_YOUR_TELEGRAM_BOT_TOKEN_HERE')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '1013871325')  # numeric chat id
CHECK_INTERVAL = int(os.environ.get('CHECK_INTERVAL_SECONDS', 300))  # –ø–æ–≤—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ—Ä–æ–≥ (—Ä—É–±–ª–∏). –ü–æ –∑–∞–¥–∞—á–µ ‚Äî –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ—Ä–æ–≥ 50000
QUERIES = [
    {"q": "Iphone 16", "threshold": 50000},
    {"q": "–ê–π—Ñ–æ–Ω 16", "threshold": 50000},
]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
NOTIFIED_FILE = 'notified.json'

HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0 Safari/537.36',
    'Accept': 'application/json, text/plain, */*',
}

SEARCH_URL = 'https://search.wb.ru/exactmatch/ru/common/v4/search?query={query}&limit=30'


def load_notified():
    try:
        with open(NOTIFIED_FILE, 'r', encoding='utf-8') as f:
            return set(json.load(f))
    except Exception:
        return set()


def save_notified(s):
    try:
        with open(NOTIFIED_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(s), f, ensure_ascii=False, indent=2)
    except Exception as e:
        print('Error saving notified file:', e)


def send_telegram_message(text):
    if TELEGRAM_TOKEN.startswith('PUT_YOUR'):
        print('Telegram token not set. Set TELEGRAM_TOKEN environment variable.')
        return False
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': text,
        'parse_mode': 'HTML',
        'disable_web_page_preview': False,
    }
    try:
        r = requests.post(url, data=payload, timeout=15)
        if r.status_code == 200:
            return True
        else:
            print('Telegram send error', r.status_code, r.text)
            return False
    except Exception as e:
        print('Telegram request failed:', e)
        return False


def parse_search_results(data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ (–≤ —Ä—É–±–ª—è—Ö) –∏–∑ –æ—Ç–≤–µ—Ç–∞ WB (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: {id, name, price_rub, url}
    """
    items = []
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–π—Ç–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        products = []
        if isinstance(data, dict):
            # –í —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö API –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
            # —á–∞—â–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è data['data']['products'] –∏–ª–∏ data['data']['subjects']
            for key in ('data', 'items', 'products', 'subjects'):
                if key in data and isinstance(data[key], list):
                    products = data[key]
                    break
            # –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–ª–æ–∂–µ–Ω–Ω–æ–µ
            if not products and 'data' in data and isinstance(data['data'], dict):
                for k in ('products', 'subjects', 'items'):
                    if k in data['data'] and isinstance(data['data'][k], list):
                        products = data['data'][k]
                        break

        # –§–æ–ª–ª–±–µ–∫ ‚Äî –∏—Å–∫–∞—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å 'id' –∏ 'salePriceU'
        if not products:
            def collect(d):
                if isinstance(d, dict):
                    if 'id' in d and ('salePriceU' in d or 'priceU' in d or 'price' in d):
                        products.append(d)
                    for v in d.values():
                        collect(v)
                elif isinstance(d, list):
                    for it in d:
                        collect(it)
            collect(data)

        for p in products:
            try:
                pid = p.get('id') or p.get('nm_id') or p.get('sku')
                name = p.get('name') or p.get('title') or p.get('brand') or ''
                # —Ü–µ–Ω–∞ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö API –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ salePriceU (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
                price_u = p.get('salePriceU') or p.get('priceU') or p.get('price')
                if price_u is None:
                    # –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑ nested
                    if 'price' in p and isinstance(p['price'], dict):
                        price_u = p['price'].get('sale') or p['price'].get('now')
                # –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä—É–±–ª–∏: –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö -> –¥–µ–ª–∏–º –Ω–∞ 100
                price_rub = None
                if isinstance(price_u, (int, float)):
                    price_rub = int(price_u) / 100.0
                elif isinstance(price_u, str) and price_u.isdigit():
                    price_rub = int(price_u) / 100.0

                link = None
                if pid:
                    link = f'https://www.wildberries.ru/catalog/{pid}/detail.aspx'

                if price_rub is not None:
                    items.append({'id': str(pid), 'name': name, 'price': price_rub, 'url': link})
            except Exception:
                continue
    except Exception as e:
        print('Error parsing results:', e)
    return items


def search_wb(query):
    url = SEARCH_URL.format(query=quote_plus(query))
    try:
        r = requests.get(url, headers=HEADERS, timeout=15)
        if r.status_code != 200:
            print('WB search HTTP', r.status_code)
            return []
        try:
            data = r.json()
        except ValueError:
            # –∏–Ω–æ–≥–¥–∞ WB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JS wrapper ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –≤—Ä—É—á–Ω—É—é
            text = r.text
            start = text.find('{')
            if start != -1:
                try:
                    data = json.loads(text[start:])
                except Exception:
                    return []
            else:
                return []
        return parse_search_results(data)
    except Exception as e:
        print('WB request failed:', e)
        return []


def main_loop():
    print('Starting Wildberries watcher. Queries:', [q['q'] for q in QUERIES])
    notified = load_notified()
    while True:
        for q in QUERIES:
            query = q['q']
            threshold = q['threshold']
            print(f'[{datetime.now()}] Searching for: {query} (threshold {threshold} RUB)')
            try:
                results = search_wb(query)
                for item in results:
                    try:
                        if item['price'] <= threshold:
                            uid = f"{query}__{item.get('id') or item.get('url') or item.get('name')}__{int(item['price'])}"
                            if uid in notified:
                                # —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏
                                continue
                            text = (
                                f"üîî <b>–ù–∞–π–¥–µ–Ω–æ –Ω–∞ Wildberries</b>\n"
                                f"<b>{item.get('name') or query}</b> ‚Äî <b>{item['price']:.0f} ‚ÇΩ</b>\n"
                            )
                            if item.get('url'):
                                text += f"–°—Å—ã–ª–∫–∞: {item['url']}\n"
                            text += f"–ó–∞–ø—Ä–æ—Å: {query}"
                            ok = send_telegram_message(text)
                            if ok:
                                notified.add(uid)
                                save_notified(notified)
                                print('Notified:', uid)
                            else:
                                print('Failed to send notification for', uid)
                    except Exception as e:
                        print('Error processing item:', e)
            except Exception as e:
                print('Search loop error:', e)
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API
            time.sleep(1)
        print('Iteration finished. Sleeping for', CHECK_INTERVAL, 'seconds')
        time.sleep(CHECK_INTERVAL)


if __name__ == '__main__':
    try:
        main_loop()
    except KeyboardInterrupt:
        print('Stopped by user')


